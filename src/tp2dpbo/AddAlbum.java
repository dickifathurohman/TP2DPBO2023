/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tp2dpbo;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Dicki Fathurohman
 */
public class AddAlbum extends javax.swing.JFrame {
     private dbConnection db = new dbConnection(); 
     File f = null;
     private Boolean isUpdate = false;
     private MainFrame panelCard;
     private int id;
     
     private String title;
     private int year;
     private String namafoto;
     private int id_artist;
    /**
     * Creates new form AddArtist
     */
    public AddAlbum() {
        initComponents();
        
        if(isUpdate == false){
            ButtonSubmit.setText("Add Data");
        }else{
            ButtonSubmit.setText("Update Data");
        }
        
        ResultSet item = db.selectQuery("SELECT * FROM artist");
        
        try {
            while(item.next()){
                PilihanArtist.addItem(item.getString("name"));
            }
        } catch (SQLException ex) {
             Logger.getLogger(AddAlbum.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public AddAlbum(MainFrame panelCard, int id){
        initComponents();
        ImageIcon icon = null;
        
        this.panelCard = panelCard;
        this.id = id;
        
        isUpdate = true;
        
        if(isUpdate == false){
            ButtonSubmit.setText("Add Data");
        }else{
            ButtonSubmit.setText("Update Data");
        }
        
        ResultSet res = db.selectQuery("SELECT * FROM album WHERE id_album=" +this.id);
        
        try {
            if(res.next()){
                FieldTitle.setText(res.getString("title"));
                FieldYear.setText(Integer.toString(res.getInt("year")));

                icon = new ImageIcon("src\\Assets\\"+res.getString("cover"));
                namafoto = res.getString("cover");
                Image image = icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                ImageIcon ic = new ImageIcon(image);
                LabelCover.setIcon(ic);
            }
        } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, e);
        }
        
        ResultSet item = db.selectQuery("SELECT * FROM artist");
        
        try {
            while(item.next()){
                PilihanArtist.addItem(item.getString("name"));
            }
        } catch (SQLException ex) {
             Logger.getLogger(AddAlbum.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FieldTitle = new javax.swing.JTextField();
        FieldYear = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LabelCover = new javax.swing.JLabel();
        ButtonUpload = new javax.swing.JButton();
        ButtonSubmit = new javax.swing.JButton();
        PilihanArtist = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        ButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FieldTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldTitleActionPerformed(evt);
            }
        });

        jLabel1.setText("Title");

        jLabel2.setText("Year");

        LabelCover.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ButtonUpload.setText("Upload Cover");
        ButtonUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUploadActionPerformed(evt);
            }
        });

        ButtonSubmit.setText("Submit");
        ButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSubmitActionPerformed(evt);
            }
        });

        jLabel3.setText("Artist");

        ButtonCancel.setText("Cancel");
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ButtonUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ButtonCancel)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(LabelCover, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(FieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(PilihanArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(FieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                    .addComponent(ButtonSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(ButtonCancel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(FieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PilihanArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(LabelCover, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ButtonUpload)
                .addGap(30, 30, 30)
                .addComponent(ButtonSubmit)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUploadActionPerformed
        // TODO add your handling code here:
       try{
          JFileChooser chooser = new JFileChooser();
          chooser.setAcceptAllFileFilterUsed(false); // Disable the "All Files" option
          chooser.addChoosableFileFilter(new FileNameExtensionFilter("Images (*.jpg, *.jpeg, *.png)", "jpg", "jpeg", "png"));
          chooser.showOpenDialog(null);
          f = chooser.getSelectedFile();
          ImageIcon icon = new ImageIcon(f.toString());
          Image image = icon.getImage().getScaledInstance(LabelCover.getWidth(), LabelCover.getHeight(), Image.SCALE_SMOOTH);
          ImageIcon ic = new ImageIcon(image);
          LabelCover.setIcon(ic);
         
       } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
       }
    }//GEN-LAST:event_ButtonUploadActionPerformed

    private void FieldTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldTitleActionPerformed
    
    private void getData(){
        title = FieldTitle.getText();
        year = Integer.parseInt(FieldYear.getText());
        
        String artist = PilihanArtist.getSelectedItem().toString();
        String query = String.format("SELECT * FROM artist WHERE name='%s'", artist);
        ResultSet res = db.selectQuery(query);

        try {
            if(res.next()){
                id_artist = res.getInt("id");
            }
        } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, e);
        }
        
        if(title.isEmpty() || FieldYear.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Harap isi form yang kosong!");
        }
        else{
            
            String newpath = "src/Assets/";
            File directory = new File(newpath);
            if(!directory.exists()){
                directory.mkdir();
            }
            
            if(f != null){
                String filename = f.getAbsolutePath();
                namafoto = filename.substring(filename.lastIndexOf('\\') + 1);
                File sourceFile = new File(filename);
                Date tanggal_upload = new Date();
                String tampilan = "yyyyMMddhhmmss";
                SimpleDateFormat fm = new SimpleDateFormat(tampilan);
                String tanggal = String.valueOf(fm.format(tanggal_upload));
                File destinationFile = new File(newpath+"/" + tanggal.toString() +"_"+ namafoto);
                String newfile = destinationFile.getAbsolutePath();
                namafoto = newfile.substring(newfile.lastIndexOf('\\') + 1);
                try {
                    Files.copy(sourceFile.toPath(), destinationFile.toPath());
                } catch (IOException ex) {
                    Logger.getLogger(AddAlbum.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } 
    }
    private void AddData(){
        
        getData();
        
        String sql = "INSERT INTO album(title, year, cover, artist_id) VALUES ('"+title+"' , '"+year+"', '"+namafoto+"', '"+id_artist+"')";
        db.updateQuery(sql);

        dispose();
        JOptionPane.showMessageDialog(null, "Add Success!");
        new MainFrame("Album").setVisible(true);
    }
    
    private void UpdateData(){
        
        getData();
        
        String sql = "UPDATE album SET title='" + title + "', year='" + year + "', cover='" + namafoto + "' , artist_id='" + id_artist + "' WHERE id_album=" + this.id;

        int cardDeleted = db.updateQuery(sql);
        if(cardDeleted > 0){
            panelCard.setPanelAlbum();
            dispose();
            JOptionPane.showMessageDialog(null, "Data telah diupdate!");
            new MainFrame("Album").setVisible(true);
        }
        else{
            dispose();
            JOptionPane.showMessageDialog(null, "Data gagal diupdate!");
            new MainFrame("Album").setVisible(true);
        }
        
        
    }
    
    private void ButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSubmitActionPerformed
        // TODO add your handling code here:
        if(isUpdate == false){
            AddData();
        }else{
            UpdateData();
        }
    }//GEN-LAST:event_ButtonSubmitActionPerformed

    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelActionPerformed
        // TODO add your handling code here:
        dispose();
        new MainFrame("Album").setVisible(true);
    }//GEN-LAST:event_ButtonCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAlbum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAlbum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAlbum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAlbum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddAlbum().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JButton ButtonSubmit;
    private javax.swing.JButton ButtonUpload;
    private javax.swing.JTextField FieldTitle;
    private javax.swing.JTextField FieldYear;
    private javax.swing.JLabel LabelCover;
    private javax.swing.JComboBox<String> PilihanArtist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
